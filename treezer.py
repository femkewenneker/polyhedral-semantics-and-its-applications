"""
Input:  a text file in the form as those generated by treeMaker.py.
Output: a json file representing a tree, which can be used as input for
    treeToModel.py.

In addition to the atomic propositions generated by treeMaker.py,
the code in this files adds an atomic proposition for each leaf, so
that they can be used in the formulas for Strahler numbers.
Technically only one such proposition is needed per node that is connected
to a leaf. This was ignored for simplicity of the code.
    
Femke Wenneker, June 20 2025.
"""


import json
import sys
from math import cos, sin, pi

# A function to read in the given txt file. 
# Output: a list of lists of all nodes in the trees,
#   where each list corresponds to one layer of the tree.
def read_tree(filename):
    with open(filename, "r") as file:
        tree = [[]]
        for line in file:
            if line[0] in ['/', '-', '\n']:
                continue
            if line[0] in ['[', '(']:
                tree[-1].append(line.split())
            else: 
                tree.append([])
    return tree


# Generating the coordinates and links for each node in the tree.
#   tree: a representation of the tree as saved by read_tree.
#   max_n: maximum number of children a node can have.
def process_tree(tree, max_n):
    links = []
    nodes = []
    unconnected_nodes = []
    index = 0
    leaf_counter = 0

    for l, layer in enumerate(tree):
        for group in layer:
            if len(unconnected_nodes) != 0:
                source = unconnected_nodes.pop(0)
            else:
                source = False
            for n, node in enumerate(group):
                atoms = node[1:-1].split()
                if not source:
                    coord = {"x": 0, "y": 0, "z": 0}
                else:
                    # shorten the radius each level so the branches won't cross
                    x = source['coord']['x'] + 3*pow(0.5, l-1) * cos(2*pi*n/max_n)
                    y = source['coord']['y'] + 3*pow(0.5, l-1) * sin(2*pi*n/max_n)
                    coord = {"x": x, "y": y, "z": l}
                    links.append({"source": source['index'], "target": index, "index_to_source": n})
                # Adding extra propositions for Strahler numbers.
                if 'L' in atoms:
                    atoms.append(str(leaf_counter))
                    leaf_counter += 1
                node_data = {"atoms": atoms, "coord": coord, "index":index}
                nodes.append(node_data)
                if node[0] == '[': unconnected_nodes.append(node_data)
                index += 1
    return links, nodes


if __name__ == "__main__":
    filename = sys.argv[1]

    tree = read_tree(filename)
    max_n = 4 # hardcoded to four because of the 3D structure that is currently used.
    links, nodes = process_tree(tree, max_n)


    outfilename = filename.split('.')[0] + '.json'
    with open(outfilename, "w") as outfile:
        json.dump({"links": links, "nodes": nodes}, outfile, indent=2)
